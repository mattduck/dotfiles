# -*- mode:org; org-confirm-babel-evaluate: nil -*-
#+TITLE: early-init.org

This file contains anything that I want to run before the main ~init.el~.

* Compile

The ~org-babel~ functions I use to compile ~init.el~ and ~early-init.el~. I want
these to always be available in case anything in the config breaks -- otherwise
I won't be able to edit the config easily.

#+begin_src emacs-lisp
(message "start of early-init.el")

(defun md/dotfiles-get-path (path)
  "Lookup files that are in my dotfiles directory"
  (concat
   (or (getenv "DOTFILES")
       "/f/dotfiles")
   "/"
   path))

(defun md/emacs-get-path (path)
  "Lookup files that are in the emacs user directory"
  (concat user-emacs-directory path))

(defun md/dotfiles-compile ()
  "Use org-babel-tangle to create init.el and byte-compile it."
  (interactive)
  (find-file (md/emacs-get-path "init.org"))
  (setq-local org-confirm-babel-evaluate nil)
  (org-babel-tangle nil "init.el")
  (byte-compile-file (md/emacs-get-path "init.el")))

(defun md/dotfiles-compile-early ()
  "Use org-babel-tangle to create early-init.el and byte-compile it."
  (interactive)
  (find-file (md/emacs-get-path "early-init.org"))
  (setq-local org-confirm-babel-evaluate nil)
  (org-babel-tangle nil "early-init.el")
  (byte-compile-file (md/emacs-get-path "early-init.el")))

(defun md/dotfiles-compile-all ()
  (interactive)
  (md/dotfiles-compile-early)
  (md/dotfiles-compile))
#+end_src

* Straight package manager

The straight docs recommend disabling this in early init:

#+begin_src emacs-lisp
(setq package-enable-at-startup nil)
#+end_src

* exwm

I use ~exwm~, which is cool but has the downside that emacs and X become closely
coupled, and if I get into a bad state on startup with either emacs or X, then
it can prevent me from easily booting emacs to fix the problem. To provide an
escape hatch, I check for the existence of a file on startup, and only
initialise ~exwm~ if the file is found.

#+begin_src emacs-lisp
(defun md/exwm-file-enable ()
  "If this file exists, my .xinitrc will load exwm instead of i3."
  (interactive)
  (f-touch "~/.exwm-enabled")
  (message "exwm file touched"))

(defun md/exwm-file-disable ()
  "If this file exists, my .xinitrc will load exwm instead of i3.
Calling this will delete the file, causing i3 to load next time."
  (interactive)
  (delete-file "~/.exwm-enabled")
  (message "exwm file deleted"))

(defun md/exwm-enabled ()
  (file-exists-p "~/.exwm-enabled"))
#+end_src

* Fonts

Setting this in early-init allows it to apply before the first buffer:

#+begin_src emacs-lisp
(defun md/set-default-font ()
	(interactive)
	(set-face-attribute 'default nil
					:height 180
					:family "Inconsolata")
	(setq-default line-spacing 0.2)
	(run-hooks 'after-setting-font-hook 'after-setting-font-hooks))

(md/set-default-font)
#+end_src

* Other pre-init formatting

This also ensures that any early buffers (eg. scratch) have the same mode line,
instead of the default mode line:

#+begin_src emacs-lisp
;; Want this to apply to first buffer - a very basic modeline
(setq-default mode-line-format
      `("    %b"
       ,(let ((p (and (fboundp 'project-current) (project-current))))
         (when p
           (format " [%s]" (project-name (project-current)))))))
#+end_src

* End
#+begin_src emacs-lisp
(message "end of early-init.el")
#+end_src
