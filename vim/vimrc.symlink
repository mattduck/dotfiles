set nocompatible " Remove vi compatibility to allow vim improvements
set runtimepath+=$HOME/.vim/

" Enable filetype detection and loading filetype plugins / indent
filetype plugin indent on

" Enable syntax highlighting
if has('syntax') && !exists('g:syntax_on')
    syntax enable
endif


set encoding=utf-8
set mouse=a " Enable mouse in all modes.
set history=1000

set ignorecase  " All lowercase searches are case insensitive
set smartcase   " Searches w/uppercase chars are case sensitive
set hlsearch    " Highlight search results
set incsearch   " Show search matches as type

set clipboard=unnamed

" Delete comment character when joining commented lines
if v:version > 703 || v:version == 703 && has("patch541")
    set formatoptions+=j
endif

" Ignore during file / directory completion
set wildignore=*.o,*.obj,*~,*.pyc
set wildignore+=*.egg,*.egg-info
set wildignore+=*.png,*.jpg,*.gif
set wildignore+=*.so,*.swp,*.zip,*/.Trash/**,*.pdf,*.dmg,*/Library/**,*/.rbenv/**
set wildignore+=.tmp
set wildignore+=.coverage
set wildignore+=.coverage/**
set wildignore+=*DS_Store*
set wildignore+=.sass-cache/
set wildignore+=__pycache__/
set wildignore+=.webassets-cache/

nnoremap <Space> <Nop>
let mapleader = "\<Space>"

cmap w!! w !sudo tee > /dev/null %

" Use ; for cmdline. ; usually shows next results for f/F/t/T commands.
noremap ; :

" Use , to show next results for f/F/t/T commands. Usually shows previous
" results, which is now disabled.
noremap , ;

inoremap jj <ESC>:w<CR>
inoremap jk <ESC>

" Behave properly on long lines
nnoremap j gj
nnoremap k gk

" Insert newline without leaving normal mode or moving cursor
nnoremap <leader>o mao<Esc>`a:delmarks a<CR>:w<CR>
nnoremap <leader>O maO<Esc>`a:delmarks a<CR>:w<CR>

" Find $ and ^ awkward
nnoremap L $
nnoremap H ^
vmap L $
vmap H ^
omap L $
omap H ^

" Quick way to move between method definitions in a file
nmap gk [m
nmap gj ]m
vmap gk [m
vmap gj ]m
omap gk [m
omap gj ]m

" Strip trailing whitespace and save
nnoremap <leader>W :%s/\s\+$//<cr>:let @/=''<CR>:w<CR>
nnoremap <leader>w :w<CR>

" vimrc
nnoremap <leader>vr :source $MYVIMRC<CR>
nnoremap <leader>ve :e $MYVIMRC<CR>

" Display 
set wrap " Wrap long lines
set textwidth=80
set scrolloff=5 " Scroll page with the cursor
set sidescrolloff=5

if exists('+colorcolumn')
    set colorcolumn=+1  " Boundary for line wrapping
endif

set showmatch " Showing matching brackets

set ttyfast " Improves redrawing

set showcmd " Show commands that typing, eg. 'f'.
set ruler " Show column no. in status bar.
set number  " Line numbers
set noerrorbells
set novisualbell

set laststatus=2 " Always show statusbar
set cmdheight=1

set wildmenu " Show all autocomplete choices

set noshowmode " Don't show current mode - it instead goes in statusline
set showcmd

set backspace=indent,eol,start " Backspace works in all modes
set tabstop=4 " How many columns a tab counts for
set shiftwidth=4 " How many columns are indented with >> and <<
set softtabstop=4 " Side effect of this sets how many chars backspace deletes
set expandtab " Replace tab characters with spaces
set autoindent

set background=dark
set autoread " Autoread external changes if vim hasn't edited the file.
set hidden " Buffers stay open when they're hidden, like emacs

set backup
set backupskip=/tmp/*,/private/tmp/* " Fix crontab's "temp file must be edited in place"

" Don't pollute files everywhere. Double trailing slash tells vim to avoid
" name collisions by prepending path
set backupdir=~/.vim-backup//
set directory=~/.vim-swap//   " Where swap file is saved
set undodir=~/.vim-undo//     " Not using undofile atm, but in case do

" Vim throws error on startup if the above directories don't exist
call system('mkdir -p ~/.vim-backup >/dev/null')
call system('mkdir -p ~/.vim-swap >/dev/null')
call system('mkdir -p ~/.vim-undo >/dev/null')

" Git
augroup vimrc " Group for general declarations
    autocmd!
augroup END
autocmd vimrc VimEnter * autocmd vimrc FileType gitcommit setlocal textwidth=72

" Python 
autocmd vimrc VimEnter * autocmd vimrc FileType python setlocal textwidth=79 " Adhere to PEP8

" Splitscreen
nnoremap <C-w>c :tabnew<CR>
nnoremap <C-w>n :tabnext<CR>
nnoremap <C-w>p :tabprevious<CR>
nnoremap <C-w>! :tabedit %<CR>
nnoremap <C-w>X :tabclose

nnoremap <C-w>% :vsplit<CR>
nnoremap <C-w>" :split<CR>
nnoremap <C-w>x :q!
nnoremap <C-w>z :only<CR>
nnoremap <C-w><C-h> <C-w><
nnoremap <C-w><C-j> <C-w>-
nnoremap <C-w><C-k> <C-w>+
nnoremap <C-w><C-l> <C-w>>
nnoremap <C-w><Space> <C-w>=

nnoremap <C-w>1 1gt
nnoremap <C-w>2 2gt
nnoremap <C-w>3 3gt
nnoremap <C-w>4 4gt
nnoremap <C-w>5 5gt
nnoremap <C-w>6 6gt
nnoremap <C-w>7 7gt
nnoremap <C-w>8 8gt
nnoremap <C-w>9 9gt