" TODO {{{

" - Full refactor
" - Outline-mode / better folding
"   - How to tab to toggle fold? As C-i clashes
" - Fix modeline display
" - Better file / buffer switching
" - Better help functions
"   - Is there an equivalent to C-h v? C-h k?
"   - Describe face?
" - Restclient?
" - Highlight custom keywords?
" - <leader>o and <leader>O
" - equivalent to tmux zoom?
" - proper fill/unfill region/paragraph
" - M-x?
" - git open
" - colour hex strings
" - python IDE
" - go IDE
" - terraform
" - gvim fonts
" - equivalent to use-package?


" }}}

" Init {{{

" This line should not be removed as it ensures that various options are
" properly set to work with the Vim-related packages available in Debian.
runtime! debian.vim

set nocompatible " Remove vi compatibility to allow vim improvements
set runtimepath+=$HOME/.vim/

" Correct OS X path and some other stuff:
"   - Snow leopard uses vim72
"   - Yosemite install seems to be using vim73
if has("macunix")
    let uname = system("uname")
    if uname == "Darwin\n"
        set runtimepath=$HOME/.vim,/usr/share/vim/vim73,/usr/share/vim/vim72,/usr/bin
        let g:CSApprox_konsole = 1
        set backspace=2
    endif
endif

" }}}

" Vundle {{{
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" vundle itself
    Bundle "gmarik/vundle"

" addons
    Bundle "ctrlpvim/ctrlp.vim"
    Bundle "scrooloose/syntastic"
    Bundle "tpope/vim-surround"
    Bundle "tpope/vim-repeat"
    Bundle "tpope/vim-fugitive"
    Bundle "Lokaltog/vim-easymotion"
    Bundle "scrooloose/nerdcommenter"
    Bundle "godlygeek/csapprox"
    Bundle "davidhalter/jedi-vim"
    Bundle "bling/vim-airline"
    Bundle 'airblade/vim-gitgutter'
    Bundle "mileszs/ack.vim"
    " Use isort to sort python imports
    Plugin 'fisadev/vim-isort'

" syntax / indent
    Bundle "rest.vim"
    Bundle "vim-creole"
    Bundle "mako.vim"
    Bundle "tpope/vim-markdown"
    Bundle "groenewege/vim-less"
    Bundle "python.vim"
    Bundle "cakebaker/scss-syntax.vim"
    Bundle "django.vim"
    " HTML-enhanced
    Bundle "php.vim"
    Plugin 'fatih/vim-go'

    Plugin 'hashivim/vim-terraform'

" fold
    Bundle "jpythonfold.vim"

" colours
    Bundle "altercation/vim-colors-solarized"
    Bundle "skammer/vim-css-color"
    Bundle 'morhetz/gruvbox'

" my plugins
    Bundle "file://" . $DOTFILES . "/splitscreen"

" }}}

" General {{{

" Register and reset autocmd groups.
augroup vimrc " Group for general declarations
    autocmd!
augroup END
augroup vimrc_enter " Group for wrapping things to override plugin settings on vim load
    autocmd!
augroup END

" Enable filetype detection and loading filetype plugins / indent
filetype plugin indent on

" Enable syntax highlighting
if has('syntax') && !exists('g:syntax_on')
    syntax enable
endif

set encoding=utf-8
set mouse=a " Enable mouse in all modes.
set history=1000

set ignorecase  " All lowercase searches are case insensitive
set smartcase   " Searches w/uppercase chars are case sensitive
set hlsearch    " Highlight search results
set incsearch   " Show search matches as type

" Use unamed clipboard, this should help doing copy / paste on OS X,
" for some reason.
"
set clipboard=unnamed

" Delete comment character when joining commented lines
if v:version > 703 || v:version == 703 && has("patch541")
    set formatoptions+=j
endif

" Ignore during file / directory completion
set wildignore=*.o,*.obj,*~,*.pyc
set wildignore+=*.egg,*.egg-info
set wildignore+=*.png,*.jpg,*.gif
set wildignore+=*.so,*.swp,*.zip,*/.Trash/**,*.pdf,*.dmg,*/Library/**,*/.rbenv/**
set wildignore+=.tmp
set wildignore+=.coverage
set wildignore+=.coverage/**
set wildignore+=*DS_Store*
set wildignore+=.sass-cache/
set wildignore+=__pycache__/
set wildignore+=.webassets-cache/

" }}}

" General mappings {{{

" Space leader
nnoremap <Space> <Nop>
let mapleader = "\<Space>"

" list mapping
let leader_ = "<leader>"
nnoremap <leader>h<leader> :execute "map ".leader_<CR>

cmap w!! w !sudo tee > /dev/null %

" Use ; for cmdline. ; usually shows next results for f/F/t/T commands.
noremap ; :

" Use , to show next results for f/F/t/T commands. Usually shows previous
" results, which is now disabled.
noremap , ;

" Unbind C-z to stop accidentally stopping process.
" Might put this back in soon.
"noremap <C-z> <Nop>

" Unbind arrow keys
noremap <Up> <Nop>
noremap <Down> <Nop>
noremap <Left> <Nop>
noremap <Right> <Nop>
inoremap <Up> <Nop>
inoremap <Down> <Nop>
inoremap <Left> <Nop>
inoremap <Right> <Nop>

inoremap jj <ESC>:w<CR>
inoremap jk <ESC>

" Behave properly on long lines
nnoremap j gj
nnoremap k gk

" Insert newline without leaving normal mode or moving cursor
nnoremap <leader>o mao<Esc>`a:delmarks a<CR>:w<CR>
nnoremap <leader>O maO<Esc>`a:delmarks a<CR>:w<CR>

nnoremap Y y$

" Don't care about most NERDcomment functionality
let g:NERDCreateDefaultMappings = 0
function! OverrideNERDCommentMappings()
  nmap <leader>cc <Plug>NERDCommenterToggle
  vmap <leader>cc <Plug>NERDCommenterToggle
  nmap <leader>cA <Plug>NERDCommenterAppend
endfunction
autocmd vimrc_enter VimEnter * call OverrideNERDCommentMappings()

" Find $ and ^ awkward
nnoremap L $
nnoremap H ^
vmap L $
vmap H ^
omap L $
omap H ^

" Quick way to move between method definitions in a file
nmap gk [m
nmap gj ]m
vmap gk [m
vmap gj ]m
omap gk [m
omap gj ]m

" :nohl
nnoremap <leader>hl :nohl<CR>

" Strip trailing whitespace and save
nnoremap <leader>W :%s/\s\+$//<cr>:let @/=''<CR>:w<CR>
nnoremap <leader>w :w<CR>

" vimrc
nnoremap <leader>vr :source $MYVIMRC<CR>
nnoremap <leader>ve :e $MYVIMRC<CR>
nnoremap <leader>v% :vsplit $MYVIMRC<CR>
nnoremap <leader>v" :split $MYVIMRC<CR>
nnoremap <leader>vc :tabnew $MYVIMRC<CR>

function! ToggleLineWrap()
    if &wrap
        set nowrap
    else
        set wrap
    endif
endfunction
nnoremap <leader>lw :call ToggleLineWrap()<CR>

" Center cursor after jumping to match
nnoremap n nzz
nnoremap <S-n> <S-n>zz


" }}}

" Display {{{
set wrap " Wrap long lines
set textwidth=80
set scrolloff=5 " Scroll page with the cursor
set sidescrolloff=5

set cursorline  " Hightlight current line
if exists('+colorcolumn')
    set colorcolumn=+1  " Boundary for line wrapping
endif

set showmatch " Showing matching brackets

set ttyfast " Improves redrawing

set showcmd " Show commands that typing, eg. 'f'.
set ruler " Show column no. in status bar.
set number  " Line numbers
set noerrorbells
set novisualbell

set laststatus=2 " Always show statusbar
set cmdheight=1

set wildmenu " Show all autocomplete choices

set noshowmode " Don't show current mode - it instead goes in statusline
set showcmd

set backspace=indent,eol,start " Backspace works in all modes
set tabstop=4 " How many columns a tab counts for
set shiftwidth=4 " How many columns are indented with >> and <<
set softtabstop=4 " Side effect of this sets how many chars backspace deletes
set expandtab " Replace tab characters with spaces
set autoindent


" }}}

" Colours {{{
"set t_Co=16 " Solarized uses 16 colours
"let g:CSApprox_verbose_level = 0 " Get rid of CSApprox 16col warnings
"colorscheme solarized
""let g:solarized_termcolours=16
"function! ToggleBg()
"    if &background == 'dark'
"        set background=light
"    else
"        set background=dark
"    endif
"endfunction
"
"nmap <leader>bg :call ToggleBg()<CR>

set background=dark
let g:gruvbox_termcolors=16
let g:gruvbox_contrast_dark="hard"
colorscheme gruvbox

autocmd vimrc_enter VimEnter * autocmd vimrc ColorScheme * hi Todo ctermfg=1  " red
"autocmd vimrc_enter VimEnter * autocmd vimrc ColorScheme * hi DiffAdd cterm=reverse
autocmd vimrc_enter VimEnter * autocmd vimrc ColorScheme * hi DiffChange ctermfg=4 " blue
autocmd vimrc_enter VimEnter * autocmd vimrc ColorScheme * hi DiffText ctermfg=4 " blue
"autocmd vimrc_enter VimEnter * autocmd vimrc ColorScheme * hi DiffDelete cterm=reverse

" }}}

" Files {{{
set autoread " Autoread external changes if vim hasn't edited the file.
set hidden " Buffers stay open when they're hidden, like emacs

set backup
set backupskip=/tmp/*,/private/tmp/* " Fix crontab's "temp file must be edited in place"

" Don't pollute files everywhere. Double trailing slash tells vim to avoid
" name collisions by prepending path
set backupdir=~/.vim-backup//
set directory=~/.vim-swap//   " Where swap file is saved
set undodir=~/.vim-undo//     " Not using undofile atm, but in case do

" Vim throws error on startup if the above directories don't exist
call system('mkdir -p ~/.vim-backup >/dev/null')
call system('mkdir -p ~/.vim-swap >/dev/null')
call system('mkdir -p ~/.vim-undo >/dev/null')

au BufNewFile,BufRead *.mak set filetype=mako
" }}}

" Folding {{{

" Nicer folding format, from http://dhruvasagar.com/2013/03/28/vim-better-foldtext
function! FoldText()
  let line = ' ' . substitute(getline(v:foldstart), '^\s*"\?\s*\|\s*"\?\s*{{' . '{\d*\s*', '', 'g') . ' '
  let lines_count = v:foldend - v:foldstart + 1
  let lines_count_text = '| ' . printf("%10s", lines_count . ' lines') . ' |'
  let foldchar = matchstr(&fillchars, 'fold:\zs.')
  let foldtextstart = strpart('+' . repeat(foldchar, v:foldlevel*2) . line, 0, (winwidth(0)*2)/3)
  let foldtextend = lines_count_text . repeat(foldchar, 8)
  let foldtextlength = strlen(substitute(foldtextstart . foldtextend, '.', 'x', 'g')) + &foldcolumn
  return foldtextstart . repeat(foldchar, winwidth(0)-foldtextlength) . foldtextend
endfunction

set foldtext=FoldText()
set foldmethod=syntax
set foldlevelstart=0
set foldminlines=0
set foldnestmax=3

autocmd vimrc FileType vim setlocal foldmethod=marker " For opening this file
autocmd vimrc_enter VimEnter * autocmd vimrc FileType vim setlocal foldmethod=marker

nmap <Leader>fsyn :let &l:foldmethod = 'syntax'<CR>
nmap <Leader>find :let &l:foldmethod = 'indent'<CR>
nmap <Leader>fmark :let &l:foldmethod = 'marker'<CR>

" }}}

" Easymotion {{{
let g:EasyMotion_use_upper = 1
let g:EasyMotion_keys = "URIEOWYTQPBVNCM;ALSKDJF"

autocmd vimrc_enter VimEnter * autocmd vimrc ColorScheme * hi link EasyMotionTarget Todo
autocmd vimrc_enter VimEnter * autocmd vimrc ColorScheme * hi link EasyMotionTarget2First Todo
autocmd vimrc_enter VimEnter * autocmd vimrc ColorScheme * hi link EasyMotionTarget2Second Identifier
autocmd vimrc_enter VimEnter * autocmd vimrc ColorScheme * hi link EasyMotionShade Comment
map <leader>f <Plug>(easymotion-prefix)
" }}}

" Syntastic {{{
let g:syntastic_always_populate_loc_list = 0
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_aggregate_errors = 1
let g:syntastic_id_checkers = 1
let g:synastic_enable_signs = 1
let g:syntastic_python_checkers = ["python", "flake8"]
let g:syntastic_loc_list_height = 3
" }}}

" Ctrl-p {{{
" Don't jump to other tabs/buffers, always open new
let g:ctrlp_switch_buffer = "0"

let g:ctrlp_map = "<leader>p"
noremap <leader>bp :CtrlPBuffer<CR>

if executable('ag')
    let g:ctrlp_user_command = 'ag %s --nocolor --nogroup -g ""
        \ --ignore "\v[\/](node_modules|target|dist|venv)|(\.(swp|ico|git|svn))$"'

    "" Because who wants to reload
    let g:ctrlp_use_caching = 0

endif
" }}}

" ack.vim {{{
if executable('ag')
    let g:ackprg = 'ag --vimgrep --hidden
                \ --ignore ".git"
                \ --ignore ".DS_Store"
                \ --ignore "*.pyc"
                \ --ignore "*.egg"
                \ --ignore "*.egg-info"
                \ --ignore "*node_modules/*"
                \ --ignore "__pycache__/"'
endif

let g:ackhighlight = 1
let g:ack_autofold_results = 1

" Replace default mappings with splitscreen conventions, remove what I won't
" use. Open in: current window, tab, horizontal split, vertical split.
let g:ack_mappings = {
      \ "o": "<CR><C-W>j",
      \ "t": "<C-W><CR><C-W>TgT<C-W>j",
      \ '"': "<C-W><CR><C-W>K<C-W>b",
      \ "%": "<C-W><CR><C-W>H<C-W>b<C-W>J" }

" }}}

" Git {{{
autocmd vimrc_enter VimEnter * autocmd vimrc FileType gitcommit setlocal textwidth=72

" Recommended by gitgutter docs if grep is aliased to something that changes
" output, eg. -color=auto
let g:gitgutter_escape_grep = 1

let g:gitgutter_map_keys = 0
let g:gitgutter_realtime = 0
nmap <leader>ghl :GitGutterLineHighlightsToggle<CR>
nmap <leader>gj <Plug>GitGutterNextHunk
nmap <leader>gk <Plug>GitGutterPrevHunk
nmap <leader>gadd <Plug>GitGutterStageHunk
nmap <leader>gres <Plug>GitGutterRevertHunk
nmap <leader>grev <Plug>GitGutterRevertHunk

autocmd vimrc_enter VimEnter * autocmd vimrc ColorScheme * hi GitGutterChangeDefault ctermfg=4 " blue, same as DiffChange
autocmd vimrc_enter VimEnter * autocmd vimrc ColorScheme * hi link GitGutterChangeDelete GitGutterChange
autocmd vimrc_enter VimEnter * autocmd vimrc ColorScheme * hi link GitGutterChangeDeleteLine GitGutterChangeLine

" }}}

" Python {{{
autocmd vimrc_enter VimEnter * autocmd vimrc FileType python setlocal textwidth=79 " Adhere to PEP8

" Python folding syntax isn't provided by default
autocmd vimrc_enter VimEnter * autocmd vimrc FileType python source $DOTFILES/vim/vim.symlink/bundle/jpythonfold.vim/syntax/jpythonfold.vim

" Get dotted path to python class / function. Adapted from
" https://github.com/nicwest/.dotfiles
function! PythonGetLabel(join_symbol)
  if foldlevel('.') != 0
    norm! zo
  endif
  let originalline = getpos('.')
  let lnlist = []
  let lastlineindent = indent(line('.'))
  let objregexp = "^\\s*\\(class\\|def\\)\\s\\+[^:]\\+\\s*:"
  if match(getline('.'),objregexp) != -1
    let lastlineindent = indent(line('.'))
    norm! ^wyt(
    call insert(lnlist, @0, 0)
  endif
  while line('.') > 1
    if indent('.') < lastlineindent
      if match(getline('.'),objregexp) != -1
        let lastlineindent = indent(line('.'))
        norm! ^wyt(
        call insert(lnlist, @0, 0)
      endif
    endif
    norm! k
  endwhile
  let pathlist =  split(expand('%:r'), '/')
  let pathlist_str = join(pathlist, '.')
  let lnlist_str = join(lnlist, '.')
  let @0 = join([pathlist_str, lnlist_str], a:join_symbol)
  echo 'Python label:' @0
  let @+ = @0
  call setpos('.', originalline)
endfunction

" Copy class / function path to clipboard, in format expected by different
" test tools
autocmd FileType python nnoremap <buffer> <leader>getunit :call PythonGetLabel(".")<CR>
autocmd FileType python nnoremap <buffer> <leader>getnose :call PythonGetLabel(":")<CR>
autocmd FileType python nnoremap <buffer> <leader>getpy :call PythonGetLabel("::")<CR>

" vim-isort - sort python imports automatically
autocmd FileType python nnoremap <buffer> <leader>isort :Isort<CR>:w<CR>
let g:vim_isort_map = ''  " Disable the default visual mode <C-i> mapping


" }}}

" autocmd handling {{{

" The autocmds in this file are organised to override any autocmds that might be
" set by plugins that are loaded after the vimrc on startup. We use the VimEnter
" hook to define all autocmds - to put them at the end of the list of hooks for
" each event. We also need to re-populate those autocmds when vimrc is reloaded,
" so:
doautoall vimrc_enter VimEnter

" On startup, perform all ColorScheme hooks, because they aren't done
" automatically.
autocmd vimrc_enter VimEnter * doautoall vimrc ColorScheme

" Perform all ColorScheme hooks on every reload, as they don't all get executed
" when the colorscheme is defined near the top of this file.
doautoall vimrc ColorScheme

" There are obviously better solutions to this, but this will do for now.
" }}}
